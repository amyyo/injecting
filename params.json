{"name":"Injecting","tagline":"a simple javascript dependency inject system","body":"[![Build Status](https://travis-ci.org/ssnau/injecting.svg)](https://travis-ci.org/ssnau/injecting)\r\n[![npm version](https://badge.fury.io/js/injecting.svg)](http://badge.fury.io/js/injecting)\r\n[![Dependency Status](https://david-dm.org/ssnau/injecting.svg)](https://david-dm.org/ssnau/injecting.svg)\r\n\r\nInjecting\r\n=========\r\n\r\nA simple javascript dependency inject processor, work great with Promise.\r\n\r\nExample\r\n------\r\nsimple injection:\r\n```javascript\r\nvar injecting = require('injecting');\r\nvar app = injecting();\r\napp.register('name', 'jack');\r\napp.register('person', function(name) {\r\n    this.name = name;\r\n});\r\n\r\napp.invoke(function(person) {\r\n    console.log(person.name); // jack\r\n});\r\n```\r\n\r\nrecursive injection:\r\n```javascript\r\nvar injecting = require('injecting');\r\nvar app = injecting();\r\napp.register('place', 'pacific');\r\napp.register('cat', function() {\r\n    this.name = \"white cat\";\r\n});\r\napp.register('person', function(cat) {\r\n    this.name = \"robot\";\r\n    this.pet = cat;\r\n});\r\napp.register('story', function(place, person){\r\n    return {\r\n        place: place,\r\n        person: person.name,\r\n        pet: person.pet.name\r\n    };\r\n});\r\napp.invoke(function(story){\r\n    console.log(story);\r\n    /* should be\r\n    {\r\n        place: 'pacific',\r\n        person: 'robot',\r\n        pet: 'white cat'\r\n    };\r\n    */\r\n});\r\n\r\n```\r\n\r\nAsync Function\r\n-------\r\n\r\n```\r\n\r\nvar injecting = require('injecting');\r\nvar app = injecting();\r\napp.register('name', function() {\r\n  return new Promise(function(resolve) {\r\n    setTimeout(function () {\r\n      resolve('jack');\r\n    }, 1000);\r\n  });\r\n});\r\n\r\n// will wait for name resolved\r\napp.register('person', function (name) {\r\n  return new Promise(function(resolve) {\r\n    setTimeout(function () {\r\n      resolve({name: name, age: 10});\r\n    }, 1000);\r\n  });\r\n});\r\n\r\n\r\napp\r\n  .get('person')\r\n  .then(function(person) {\r\n    console.log(person); // should be {name: 'jack', age: 10}\r\n  });\r\n```\r\n\r\n\r\n\r\nPlease refer to the [test cases](https://github.com/ssnau/injecting/blob/master/tests/injecting.spec.js) for more examples.\r\n\r\nmethods\r\n------\r\n### constant(name, value)\r\n\r\nregister a constant as dependency.\r\n\r\n### service(name, constructor)\r\n\r\nregister a service as dependency. notice you have to pass a function for it. `injecting` will call the constructor and return the instance the first time you inject. It will return the same instance for later use.\r\n\r\n### register(name, obj|fn)\r\n\r\nregister the argument as dependency. automatically register as constant if the second argument is object|string|number, and register as service if the second argument is function.\r\n\r\n### invoke(fn)\r\n\r\ninvoke a function and automatically inject for its arguments. Expect to return a promise.\r\n\r\n### get(name)\r\n\r\nget a particular injection in promise form.\r\n\r\nLicense\r\n-----\r\nMIT\r\n","google":"UA-70092886-1","note":"Don't delete this file! It's used internally to help with page regeneration."}